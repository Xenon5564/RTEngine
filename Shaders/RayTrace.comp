#version 450
layout(local_size_x = 8, local_size_y = 8) in;

layout(rgba32f, binding = 0) uniform image2D destImage;
layout(rgba32f, binding = 1) uniform image2D accumImage;

uniform vec3 camPos;
uniform vec3 camForward;
uniform vec3 camUp;
uniform vec3 camRight;
uniform float camFOV;

uniform int globalFrameID; // Frames generated since start
uniform int frameID; //Frames since last camera move

struct Sphere{
    vec3 position;
    float radius;
    vec3 albedo;
    float roughness; 
};

const uint SPHERE_COUNT = 5;
const float PI = 3.14159265358979323846;
const float EPSILON = 0.0001;

Sphere spheres[SPHERE_COUNT] = Sphere[](
    Sphere(vec3(-1.0, 0.0, 0.0), 0.5, vec3(1.0, 1.0, 1.0), 0), 
    Sphere(vec3(0.0, 0.0, 0.0), 0.5, vec3(1.0, 1.0, 1.0), 0.25), 
    Sphere(vec3(1.0, 0.0, 0.0), 0.5, vec3(1.0, 1.0, 1.0), 0.5),
    Sphere(vec3(2.0, 0.0, 0.0), 0.5, vec3(1.0, 1.0, 1.0), 1),
    Sphere(vec3(0.0, -100.5, 0.0), 100, vec3(1.0, 1.0, 1.0), 0) 
);

// Randomness
uint hash(uint x) {
    x ^= x >> 17;
    x *= 0xED5AD4BBu;
    x ^= x >> 11;
    x *= 0xAC4C1B51u;
    x ^= x >> 15;
    x *= 0x31848BABu;
    x ^= x >> 14;
    return x;
}
float rand(inout uint seed) {
    seed = hash(seed);
    return float(seed) / float(0xFFFFFFFFu); // Normalize to [0, 1)
}

// Samples cosine-weighted hemisphere oriented around `normal`
vec3 sampleHemisphere(vec3 normal, inout uint seed) {
    float u1 = rand(seed);
    float u2 = rand(seed);

    float r = sqrt(u1);
    float theta = 6.28318530718 * u2; // 2π

    float x = r * cos(theta);
    float y = r * sin(theta);
    float z = sqrt(1.0 - u1);

    // Build tangent frame (TBN)
    vec3 tangent = normalize(abs(normal.x) > 0.1 ? cross(normal, vec3(0,1,0)) : cross(normal, vec3(1,0,0)));
    vec3 bitangent = cross(normal, tangent);

    return normalize(x * tangent + y * bitangent + z * normal);
}

bool RaySphereIntersection(vec3 rayOrigin, vec3 rayDir, vec3 sphereCenter, float radius, out float t) {
    vec3 oc = rayOrigin - sphereCenter;
    float a = dot(rayDir, rayDir); // should be 1.0 if rayDir is normalized
    float b = 2.0 * dot(oc, rayDir);
    float c = dot(oc, oc) - radius * radius;
    float discriminant = b * b - 4.0 * a * c;

    if (discriminant < 0.0) {
        return false;
    }

    float sqrtDisc = sqrt(discriminant);
    float t0 = (-b - sqrtDisc) / (2.0 * a);
    float t1 = (-b + sqrtDisc) / (2.0 * a);

    // Return the nearest positive t
    if (t0 > EPSILON) {
        t = t0;
        return true;
    } else if (t1 > EPSILON) {
        t = t1;
        return true;
    }

    return false; // both intersections are behind the ray
}

bool CastRay(vec3 rayOrigin, vec3 rayDir, out Sphere hitSphere, out float t)
{
    float closestT = 100000000;
    float dis;
    int closestID = -1;

    for(int i = 0; i < SPHERE_COUNT; i++)
    {
        if(RaySphereIntersection(rayOrigin, rayDir, spheres[i].position, spheres[i].radius, dis))
        {
            if(dis < closestT)
            {
                closestT = dis;
                closestID = i;
            }
        }
    }

    if(closestID != -1)
    {
        hitSphere = spheres[closestID];
        t = closestT;
        return true;
    }

    return false;
}

vec3 TraceRay(vec3 camPos, vec3 camToPlaneDir, uint seed)
{
    vec3 rayOri = camPos;
    vec3 rayDir = camToPlaneDir;

    vec3 finalColor = vec3(0, 0, 0);
    vec3 pathThroughput = vec3(1, 1, 1); // Initial throughput

    float t;
    float dummyT;

    Sphere hitSphere;
    Sphere dummySphere;

    for(int b = 0; b < 5; b++)
    {
        if(CastRay(rayOri, rayDir, hitSphere, t))
        {
            vec3 sphereCen = hitSphere.position;
            vec3 sphereCol = hitSphere.albedo;
            float sphereRoughness = hitSphere.roughness;

            vec3 lightPos = vec3(0.0, 5, 0.0);
            float lightStrength = 20.0;

            vec3 hitPoint = rayOri + rayDir * t;
            vec3 normal = normalize(hitPoint - sphereCen);

            hitPoint += normal * EPSILON; // Offset to avoid self-intersection

            rayOri = hitPoint; // Update ray origin to the hit point

            if(sphereRoughness <= rand(seed)) // Check if we should sample a new direction
            {
                rayDir = sampleHemisphere(normal, seed); // Sample a new direction in the hemisphere
            }
            else
            {
                rayDir = reflect(rayDir, normal); // Reflect the ray direction
            }

            vec3 lightDir = normalize(lightPos - hitPoint);
            
            if(!CastRay(hitPoint, lightDir, dummySphere, dummyT))
            {
                float lambert = max(0.0, dot(normal, lightDir));
                float lightDis = length(lightPos - hitPoint);
                float lightAtten = lightStrength / (lightDis * lightDis);

                finalColor += pathThroughput * sphereCol * lambert * lightAtten;
            }
            pathThroughput *= sphereCol / PI; 
        }
        else
        {
            vec3 skyCol = vec3(0.1, 0.1, 0.1);
            finalColor += pathThroughput * skyCol; // Background color
            break;
        }
    }       
    return finalColor;
}

void main() {
    ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
    ivec2 imgSize = imageSize(destImage);
    vec2 uv = (vec2(pix) + vec2(0.5)) / vec2(imgSize);

    uint seed = uint(pix.x * 73856093u ^ pix.y * 19349663u ^ uint(globalFrameID * 1000.0)) * uint(frameID + 2);

    float planeDist = 1;
    float halfHeight = tan(radians(camFOV * 0.5)) * planeDist;
    float aspect = float(imgSize.x) / float(imgSize.y);
    float halfWidth = halfHeight * aspect;

    vec3 planeCenter = camPos + camForward * planeDist;
    vec3 pointOnPlane = planeCenter
        + (uv.x - 0.5) * 2.0 * halfWidth * camRight
        + (uv.y - 0.5) * 2.0 * halfHeight * camUp;

    vec3 dir = normalize(pointOnPlane - camPos);

    vec3 prevAverageColor = imageLoad(accumImage, pix).rgb; // Load the accumulated color
    float totalFrames = float(frameID) + 1.0;
    vec3 newAverage = (prevAverageColor * float(frameID) + TraceRay(camPos, dir, seed)) / totalFrames;

    imageStore(accumImage, pix, vec4(newAverage, 1.0)); // Store the new average color
    imageStore(destImage, pix, vec4(newAverage, 1.0));
    imageStore(destImage, pix, vec4(newAverage, 1.0));

}